#!/bin/sh
#********************************************************************************
# Configure script of eQmail-1.10
CRITICAL=""

echo -n "Checking system ... "
OS=`uname -s | tr '/:[A-Z]' '..[a-z]'` ; echo -n $OS > systype
echo "building on "${OS}"!"
echo -n "Checking architecture ... "
ARCH=`uname -m` ; echo -n ":$ARCH" >> systype
echo "build on "${ARCH}"!"

# check for system tools (required) !!!
for f in nslookup bash hostname [ test make perl
do
  echo -n "Checking for $f ... "
  which $f 2>/dev/null
  if [ $? -ne 0 ] ; then echo "not found!" ; exit 1 ; fi
done

# check for optional tools
for f in svc start-stop-daemon tcpserver xinetd php awk ip
do
  echo -n "Checking for $f ... "
  which $f 2>/dev/null
  if [ $? -ne 0 ] ; then echo "not found! Ignoring!" 
  else echo `which "$f"` > _has.$f.tmp ; fi
done

#********************************************************************************
# Checking conf-* files
for cf in $(ls conf-*)
do
  t=`echo $cf | cut -d- -f2`
  if [ ! "$t" = "cc" ] && [ ! "$t" = "ld" ] && \
     [ ! "$t" = "groups" ] && [ ! "$t" = "patrn" ] && [ ! "$t" = "opt" ] ; then
     echo -n "Checking config file $cf ... "
     # user alias
     if [ "$t" = "users" ] ; then t="usera" ; fi
     echo "char auto_$t[] = \""`head -1 $cf`"\";" > auto_"$t".c
     if [ $? -eq 0 ] ; then
        echo "auto_$t.c created!"
      else 
        echo "failed!" ; exit 1
     fi
  fi
done
# queue split
echo "int auto_split = `head -1 conf-split`;" > auto_split.c
# paternalism
p=`echo "ibase=8; \`head -1 conf-patrn\`" | bc`
echo "int auto_patrn = $p;" > auto_patrn.c
# silent spawn limit
fd_max=`expr \`ulimit -n\` - 4`
fd_spn=`head -1 conf-spawn`
if [ $fd_spn -gt $fd_max ] ; then fd_spn=$fd_max ; fi
echo "int auto_spawn = $fd_spn;" > auto_spawn.c

#********************************************************************************
# checking that users from conf-users are exists (excluding 'alias')
#  id -u $(head -1 conf-users) 2>&1 >/dev/null  #|| (echo "run mkusers" ; exit 1)
#  if [ $? -ne 0 ] ; then echo "Create users first!" ; exit 1 ; fi
for i in 2 3 4 5 6 7 8
do
  id -u `head -$i conf-users | tail -1` 2>&1 >/dev/null
  if [ $? -ne 0 ] ; then echo "Create users first!" ; exit 1 ; fi
done

#********************************************************************************
#
. inc/getids.inc
echo -n "Checking users and groups"
echo "int auto_uida = $UIDA;"  > auto_uids.c
echo "int auto_uidd = $UIDD;" >> auto_uids.c
echo "int auto_uidl = $UIDL;" >> auto_uids.c
echo "int auto_uido = $UIDO;" >> auto_uids.c
echo "int auto_uidp = $UIDP;" >> auto_uids.c
echo "int auto_uidq = $UIDQ;" >> auto_uids.c
echo "int auto_uidr = $UIDR;" >> auto_uids.c
echo "int auto_uids = $UIDS;" >> auto_uids.c
echo "int auto_gidq = $GIDQ;" >> auto_uids.c
echo "int auto_gidn = $GIDN;" >> auto_uids.c
echo " ... auto_uids.c created!"

. ./inc/conf.inc      # save values of conf-* files temporarily

#********************************************************************************
# IMPORTANT: check for OpenSSL and its header files (needed with '-DTLS' only)
CCOPTS=" -I ./inc"

searchHeaders() {
  # search for headers given by the '-I' option in conf-cc
  SSLHDRS=""
  for f in $(head -1 conf-cc | cut -d\- -f2-)
  do
    echo "$f" | grep '^-I' | grep 'openssl' 2>&1 >/dev/null
    if [ $? == "0" ] ; then SSLHDRS=$(echo $f | cut -d- -f2 | cut -dI -f2) ; fi
  done
  # given include dir doesn't exists
  if [ ! -d "$SSLHDRS" ] ; then SSLHDRS="" ; fi
}
# needed with '-DTLS' only
if (head -1 conf-cc | grep -e '\-DTLS' > /dev/null) ; then
   # check for OpenSSL binary
   echo -n "Checking for OpenSSL binary ... "
   for f in openssl eopenssl
   do
       TMP=`which $f 2>/dev/null`
       if [ "$TMP" ] ; then
          SSLVER=`$TMP version | cut -d\  -f1 | tr [A-Z] [a-z]`
          if [ "$SSLVER" = "openssl" ] ; then SSLBIN="$TMP" ; fi
       fi
   done
   if [ ! "$SSLBIN" ] ; then echo "NOT FOUND!" ; CRITICAL="$CRITICAL openssl binary" ; fi
   echo "$SSLBIN" | tee ssl.bin
   # check for openssl headers
   echo -n "Checking for openssl headers ..."
   searchHeaders
   if [ ! -d "$SSLHDRS" ] ; then
      # if nothing was found check the standard location
      if [ ! -d /usr/include/openssl ] ; then
         echo -ne " NOT" ; CRITICAL="$CRITICAL openssl headers" ; fi
   fi
   echo " found!"
fi

#********************************************************************************
# check for other header files
echo -n "Checking for select.h ..."
if [ -f /usr/include/sys/select.h ] ; then CCOPTS="$CCOPTS -DHAS_SELECT_H"
   else echo -n " not" ; fi
echo " found!"

# On linux we have flock, other systems have lockf instead
echo -n "Checking for flock/lockf ..."
which flock 2>/dev/null >/dev/null
if [ $? -eq 0 ] ; then CCOPTS="$CCOPTS -DHASFLOCK=1" ; echo -n " flock"
   else echo -n " lockf" ; fi
echo " found!"

#********************************************************************************
# Create compile, load, makelib
echo -n "Checking for compile ... "
CC=`head -1 conf-cc`"$CCOPTS"
(cat warn-auto.sh ; echo exec "$CC" -c '${1+"$@"}')  > compile
chmod 755 compile
echo "created!"

# load: auto-ld
echo -n "Checking for loader ... "
LD=`head -1 conf-ld`"$LDOPTS"
(cat warn-auto.sh ; echo 'main="$1"; shift' ; \
  echo exec "$LD" '-o "$main" "$main".o ${1+"$@"}') > load
chmod 755 load
echo "created!"

# makelib
echo -n "Checking for makelib ... "
(cat warn-auto.sh ; \
  echo 'main="$1"; shift' ; \
  echo 'rm -f "$main"' ; \
  echo 'ar cr "$main" ${1+"$@"}' ; \
  echo 'ranlib "$main"') > makelib
chmod 755 makelib
echo "created!"

#********************************************************************************
# Checking for shared libraries
./compile trylib.c
# Linux has a libresolv, likely BSD systems does not
echo -n "Checking for libresolv ..."
((./load trylib -lresolv) >/dev/null 2>&1 && echo "-lresolv" || exit 0)> dns.lib
[ -s dns.lib ] || echo -n " not"
echo " found!"
# OpenBSD has 'eopenssl'
if [ `grep -e openbsd systype` ] ; then
  echo " -L/usr/local/lib/eopenssl" >> ssl.lib
fi
rm -f trylib

#********************************************************************************
echo
if [ "$CRITICAL" ] ; then
   printf "\033[1m""Critical:$CRITICAL not found!""\033[0m\n"
#   exit 1
 else
   echo "Done! Now run make."
fi
